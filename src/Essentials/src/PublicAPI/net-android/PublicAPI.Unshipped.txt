#nullable enable
Microsoft.Maui.ApplicationModel.Permissions.SaveMediaPermission
Microsoft.Maui.ApplicationModel.Permissions.SaveMediaPermission.SaveMediaPermission() -> void
Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder
Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder.DecodeResponse(System.Uri! uri) -> System.Collections.Generic.IDictionary<string!, string!>?
Microsoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.get -> Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder?
Microsoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.set -> void
Microsoft.Maui.Media.IMediaGallery
Microsoft.Maui.Media.IMediaGallery.CaptureAsync(Microsoft.Maui.Media.MediaFileType type, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
Microsoft.Maui.Media.IMediaGallery.CheckCaptureSupport(Microsoft.Maui.Media.MediaFileType type) -> bool
Microsoft.Maui.Media.IMediaGallery.GetMultiPickingBehaviour() -> Microsoft.Maui.Media.MultiPickingBehaviour
Microsoft.Maui.Media.IMediaGallery.IsSupported.get -> bool
Microsoft.Maui.Media.IMediaGallery.PickAsync(int selectionLimit = 1, params Microsoft.Maui.Media.MediaFileType[]! types) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
Microsoft.Maui.Media.IMediaGallery.PickAsync(Microsoft.Maui.Media.MediaPickRequest! request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
Microsoft.Maui.Media.IMediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, byte[]! data, string! fileName) -> System.Threading.Tasks.Task!
Microsoft.Maui.Media.IMediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, string! filePath) -> System.Threading.Tasks.Task!
Microsoft.Maui.Media.IMediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, System.IO.Stream! fileStream, string! fileName) -> System.Threading.Tasks.Task!
Microsoft.Maui.Media.IMediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.MediaFilesResult
Microsoft.Maui.Media.MediaFileType
Microsoft.Maui.Media.MediaFileType.Image = 0 -> Microsoft.Maui.Media.MediaFileType
Microsoft.Maui.Media.MediaFileType.Video = 1 -> Microsoft.Maui.Media.MediaFileType
Microsoft.Maui.Media.MediaGallery
Microsoft.Maui.Media.MediaPickRequest
Microsoft.Maui.Media.MediaPickRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Media.MediaPickRequest.SelectionLimit.get -> int
Microsoft.Maui.Media.MultiPickingBehaviour
Microsoft.Maui.Media.MultiPickingBehaviour.AlwaysSingle = 0 -> Microsoft.Maui.Media.MultiPickingBehaviour
Microsoft.Maui.Media.MultiPickingBehaviour.Limit = 1 -> Microsoft.Maui.Media.MultiPickingBehaviour
Microsoft.Maui.Media.MultiPickingBehaviour.UnLimit = 2 -> Microsoft.Maui.Media.MultiPickingBehaviour
Microsoft.Maui.Storage.FileBase.FullPath.get -> string!
Microsoft.Maui.Storage.MediaFileResult
Microsoft.Maui.Storage.MediaFileResult.Dispose() -> void
Microsoft.Maui.Storage.MediaFileResult.Extension.get -> string?
Microsoft.Maui.Storage.MediaFileResult.NameWithoutExtension.get -> string?
Microsoft.Maui.Storage.MediaFileResult.Type.get -> Microsoft.Maui.Media.MediaFileType?
static Microsoft.Maui.Media.MediaGallery.CaptureAsync(Microsoft.Maui.Media.MediaFileType type, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
static Microsoft.Maui.Media.MediaGallery.CheckCaptureSupport(Microsoft.Maui.Media.MediaFileType type) -> bool
static Microsoft.Maui.Media.MediaGallery.Default.get -> Microsoft.Maui.Media.IMediaGallery!
static Microsoft.Maui.Media.MediaGallery.GetMultiPickingBehaviour() -> Microsoft.Maui.Media.MultiPickingBehaviour
static Microsoft.Maui.Media.MediaGallery.PickAsync(int selectionLimit = 1, params Microsoft.Maui.Media.MediaFileType[]! types) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
static Microsoft.Maui.Media.MediaGallery.PickAsync(Microsoft.Maui.Media.MediaPickRequest! request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.MediaFilesResult!>!
static Microsoft.Maui.Media.MediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, byte[]! data, string! fileName) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Media.MediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, string! filePath) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Media.MediaGallery.SaveAsync(Microsoft.Maui.Media.MediaFileType type, System.IO.Stream! fileStream, string! fileName) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
~Microsoft.Maui.Authentication.WebAuthenticatorResult.CallbackUri.get -> System.Uri
~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri, Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder responseDecoder) -> void
*REMOVED*Microsoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string!>!
*REMOVED*static Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string!>!
Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationError.PositionUnavailable = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationError.Unauthorized = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.Error.get -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.GeolocationListeningFailedEventArgs(Microsoft.Maui.Devices.Sensors.GeolocationError geolocationError) -> void
Microsoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?
Microsoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!
static Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!
override Microsoft.Maui.Devices.Sensors.GeolocationRequest.ToString() -> string!
static Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!
Microsoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool
Microsoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?
Microsoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest() -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan minimumTime) -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.get -> System.TimeSpan
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.Location.get -> Microsoft.Maui.Devices.Sensors.Location!
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.GeolocationLocationChangedEventArgs(Microsoft.Maui.Devices.Sensors.Location! location) -> void
static Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool
static Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void
*REMOVED*static Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Current.get -> Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer!
~Microsoft.Maui.Media.MediaFilesResult.Files.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.MediaFileResult>
~Microsoft.Maui.Media.MediaPickRequest.MediaPickRequest(string title = null, int selectionLimit = 1, Microsoft.Maui.Graphics.Rect presentationSourceBounds = default(Microsoft.Maui.Graphics.Rect), params Microsoft.Maui.Media.MediaFileType[] types) -> void
~Microsoft.Maui.Media.MediaPickRequest.Title.get -> string
~Microsoft.Maui.Media.MediaPickRequest.Types.get -> Microsoft.Maui.Media.MediaFileType[]
~override Microsoft.Maui.ApplicationModel.Permissions.SaveMediaPermission.RequiredPermissions.get -> (string androidPermission, bool isRuntime)[]
