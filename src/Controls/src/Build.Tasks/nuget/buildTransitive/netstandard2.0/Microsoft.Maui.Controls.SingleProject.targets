<!-- "Single Project" support -->
<Project>

  <ItemGroup Condition=" '$(SingleProject)' == 'true' ">
    <!-- Add metadata indicating that the platform-specific files are not part of every build configuration. -->
    <Compile Update="$(PlatformsProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>true</ExcludeFromCurrentConfiguration>
    </Compile>

    <!-- Add metadata for the files that are actually part of the current build configuration. -->
    <Compile
        Condition=" '$(TargetPlatformIdentifier)' == 'android' "
        Update="$(AndroidProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
    </Compile>
    <Compile
        Condition=" '$(TargetPlatformIdentifier)' == 'ios' "
        Update="$(iOSProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
    </Compile>
    <Compile
        Condition=" '$(TargetPlatformIdentifier)' == 'maccatalyst' "
        Update="$(MacCatalystProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
    </Compile>
    <Compile
        Condition=" '$(TargetPlatformIdentifier)' == 'windows' "
        Update="$(WindowsProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
    </Compile>
    <Compile
        Condition=" '$(TargetPlatformIdentifier)' == 'tizen' "
        Update="$(TizenProjectFolder)**/*$(DefaultLanguageSourceExtension)">
      <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
    </Compile>
  </ItemGroup>

  <!--
    Run before both _MauiInjectXamlCssAdditionalFiles and GenerateMSBuildEditorConfigFileShouldRun because
    if for some reason the _MauiInjectXamlCssAdditionalFiles target is not run, we still get in at the
    correct time for the build to be adjusted.
  -->
  <Target Name="_MauiRemovePlatformCompileItems"
          BeforeTargets="_MauiInjectXamlCssAdditionalFiles;GenerateMSBuildEditorConfigFileShouldRun"
          Condition=" '$(EnableDefaultItems)' == 'true' and '$(SingleProject)' == 'true' ">

  <!-- Removals -->
    <ItemGroup>
      <!-- Remove everything that isn't part of this platform -->
      <Compile
          Condition=" '%(Compile.ExcludeFromCurrentConfiguration)' == 'true' "
          Remove="$(PlatformsProjectFolder)**/*$(DefaultLanguageSourceExtension)" />

      <!-- Remove all Windows (WinUI) XAML Files from the Windows folder -->
      <_MauiXamlToRemove
          Condition="'$(WindowsProjectFolder)' != ''"
          Include="$(WindowsProjectFolder)**/*.xaml" />
      <EmbeddedResource Remove="@(_MauiXamlToRemove)" />
      <MauiXaml Remove="@(_MauiXamlToRemove)" />
    </ItemGroup>

  </Target>

  <!--
    Workaround for the issue where the resource starts with the Resources/ prefix,
    either in the Identity or Link metadata. The fix is to assume that was not intended
    since that is how it worked in 8.0.60 and earlier.
    However, if there is a LogicalName metadata, we will skip processing as that is what
    was explicitly set (even though the build will fail).
  -->
  <PropertyGroup>
    <CollectBundleResourcesDependsOn>
      _MauiRemoveResourcesPrefixFromBundleResource;
      $(CollectBundleResourcesDependsOn);
    </CollectBundleResourcesDependsOn>
  </PropertyGroup>
  <Target Name="_MauiRemoveResourcesPrefixFromBundleResource">
    <!-- Collect the items into 2 categories: Link or no Link -->
    <ItemGroup>
      <_MauiBundleResourceWithLogicalName
        Include="@(BundleResource->HasMetadata('LogicalName'))" />
      <_MauiBundleResourceWithLink
        Include="@(BundleResource->HasMetadata('Link'))"
        Exclude="@(_MauiBundleResourceWithLogicalName)" />
      <_MauiBundleResourceWithoutLink
        Include="@(BundleResource)"
        Exclude="@(_MauiBundleResourceWithLink);@(_MauiBundleResourceWithLogicalName)" />
    </ItemGroup>
    <!-- Set the LogicalName to be a path relative to Resources -->
    <ItemGroup>
      <_MauiBundleResourceWithRelativeLogicalName
        Include="@(_MauiBundleResourceWithLink)"
        LogicalName="$([MSBuild]::MakeRelative('$(MSBuildProjectDirectory)/Resources/', '$(MSBuildProjectDirectory)/%(Link)'))" />
      <_MauiBundleResourceWithRelativeLogicalName
        Include="@(_MauiBundleResourceWithoutLink)"
        LogicalName="$([MSBuild]::MakeRelative('$(MSBuildProjectDirectory)/Resources/', '%(FullPath)'))" />
    </ItemGroup>
    <!-- Remove all items that are not below the Resources directory -->
    <ItemGroup>
      <_MauiBundleResourceWithCorrectLogicalName
        Include="@(_MauiBundleResourceWithRelativeLogicalName)"
        Condition="!$([System.String]::new('%(_MauiBundleResourceWithRelativeLogicalName.LogicalName)').StartsWith('..'))" />
    </ItemGroup>
    <!-- Replace the items in @(BundleResource) with the ones with a correct LogicalName -->
    <ItemGroup>
      <BundleResource Remove="@(_MauiBundleResourceWithCorrectLogicalName)" />
      <BundleResource Include="@(_MauiBundleResourceWithCorrectLogicalName)" />
    </ItemGroup>
    <!-- Clean up items -->
    <ItemGroup>
      <_MauiBundleResourceResult Include="@(BundleResource)" />
      <_MauiBundleResourceWithLogicalName Remove="@(_MauiBundleResourceWithLogicalName)" />
      <_MauiBundleResourceWithLink Remove="@(_MauiBundleResourceWithLink)" />
      <_MauiBundleResourceWithoutLink Remove="@(_MauiBundleResourceWithoutLink)" />
      <_MauiBundleResourceWithRelativeLogicalName Remove="@(_MauiBundleResourceWithRelativeLogicalName)" />
      <_MauiBundleResourceWithCorrectLogicalName Remove="@(_MauiBundleResourceWithCorrectLogicalName)" />
      <_MauiBundleResourceResult Remove="@(_MauiBundleResourceResult)" />
    </ItemGroup>
  </Target>

  <!-- Import Maui Single Project property pages -->
  <PropertyGroup Condition="'$(MauiDesignTimeTargetsPath)' == ''">
    <MauiDesignTimeTargetsPath>$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Maui\Maui.DesignTime.targets</MauiDesignTimeTargetsPath>
  </PropertyGroup>
  <Import Project="$(MauiDesignTimeTargetsPath)" Condition="Exists('$(MauiDesignTimeTargetsPath)')" />

</Project>
