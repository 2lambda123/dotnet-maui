#nullable enable
Microsoft.Maui.Controls.FlyoutBase
Microsoft.Maui.Controls.FlyoutBase.FlyoutBase() -> void
Microsoft.Maui.Controls.MenuFlyout
Microsoft.Maui.Controls.MenuFlyout.Clear() -> void
Microsoft.Maui.Controls.MenuFlyout.MenuFlyout() -> void
Microsoft.Maui.Controls.MenuFlyout.Count.get -> int
Microsoft.Maui.Controls.MenuFlyout.IsReadOnly.get -> bool
Microsoft.Maui.Controls.MenuFlyout.RemoveAt(int index) -> void
Microsoft.Maui.Controls.Handlers.Compatibility.CellContentFactory
Microsoft.Maui.Controls.Handlers.Compatibility.CellContentFactory.CellContentFactory() -> void
Microsoft.Maui.Controls.Handlers.Compatibility.CellWrapperTemplate
Microsoft.Maui.Controls.Handlers.Compatibility.CellWrapperTemplateSelector
Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor
Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer
Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.ListViewRenderer() -> void
Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.UpdateAdaptor(bool initialize) -> void
Microsoft.Maui.Controls.Handlers.Compatibility.SectionCell
Microsoft.Maui.Controls.Handlers.Compatibility.SectionCell.SectionCell() -> void
Microsoft.Maui.Controls.Handlers.Compatibility.TableViewAdaptor
Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer
Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer.TableViewRenderer() -> void
Microsoft.Maui.Controls.MenuFlyoutSeparator
Microsoft.Maui.Controls.MenuFlyoutSeparator.MenuFlyoutSeparator() -> void
Microsoft.Maui.Controls.PointerEventArgs
Microsoft.Maui.Controls.PointerEventArgs.PointerEventArgs() -> void
Microsoft.Maui.Controls.PointerGestureRecognizer
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEntered -> System.EventHandler<Microsoft.Maui.Controls.PointerEventArgs!>?
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommand.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommand.set -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandParameter.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandParameter.set -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExited -> System.EventHandler<Microsoft.Maui.Controls.PointerEventArgs!>?
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommand.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommand.set -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandParameter.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandParameter.set -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerGestureRecognizer() -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMoved -> System.EventHandler<Microsoft.Maui.Controls.PointerEventArgs!>?
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommand.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommand.set -> void
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandParameter.get -> System.Windows.Input.ICommand!
Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandParameter.set -> void
Microsoft.Maui.Controls.TapGestureRecognizer.Buttons.get -> Microsoft.Maui.Controls.ButtonsMask
Microsoft.Maui.Controls.TapGestureRecognizer.Buttons.set -> void
Microsoft.Maui.Controls.TapGestureRecognizer.Tapped -> System.EventHandler<Microsoft.Maui.Controls.TappedEventArgs!>?
Microsoft.Maui.Controls.TappedEventArgs.Buttons.get -> Microsoft.Maui.Controls.ButtonsMask
Microsoft.Maui.Controls.ToolTipProperties
Microsoft.Maui.Controls.ToolTipProperties.ToolTipProperties() -> void
Microsoft.Maui.Controls.Window.Frame.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Controls.Window.Frame.set -> void
Microsoft.Maui.Controls.Window.Height.get -> double
Microsoft.Maui.Controls.Window.Height.set -> void
Microsoft.Maui.Controls.Window.MaximumHeight.get -> double
Microsoft.Maui.Controls.Window.MaximumHeight.set -> void
Microsoft.Maui.Controls.Window.MaximumWidth.get -> double
Microsoft.Maui.Controls.Window.MaximumWidth.set -> void
Microsoft.Maui.Controls.Window.MinimumHeight.get -> double
Microsoft.Maui.Controls.Window.MinimumHeight.set -> void
Microsoft.Maui.Controls.Window.MinimumWidth.get -> double
Microsoft.Maui.Controls.Window.MinimumWidth.set -> void
Microsoft.Maui.Controls.Window.SizeChanged -> System.EventHandler?
Microsoft.Maui.Controls.Window.Width.get -> double
Microsoft.Maui.Controls.Window.Width.set -> void
Microsoft.Maui.Controls.Window.X.get -> double
Microsoft.Maui.Controls.Window.X.set -> void
Microsoft.Maui.Controls.Window.Y.get -> double
Microsoft.Maui.Controls.Window.Y.set -> void
override Microsoft.Maui.Controls.ContentPresenter.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.ContentPresenter.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.FlyoutPage.OnDisappearing() -> void
override Microsoft.Maui.Controls.Grid.OnBindingContextChanged() -> void
override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.IsSelectable.get -> bool
override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.MeasureItem(double widthConstraint, double heightConstraint) -> Tizen.UIExtensions.Common.Size
override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.MeasureItem(int index, double widthConstraint, double heightConstraint) -> Tizen.UIExtensions.Common.Size
override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.Dispose(bool disposing) -> void
override Microsoft.Maui.Controls.Handlers.Compatibility.TableViewAdaptor.IsSelectable.get -> bool
override Microsoft.Maui.Controls.Handlers.Compatibility.TableViewAdaptor.MeasureItem(double widthConstraint, double heightConstraint) -> Tizen.UIExtensions.Common.Size
override Microsoft.Maui.Controls.Handlers.Compatibility.TableViewAdaptor.MeasureItem(int index, double widthConstraint, double heightConstraint) -> Tizen.UIExtensions.Common.Size
override Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer.Dispose(bool disposing) -> void
override Microsoft.Maui.Controls.TemplatedView.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Controls.TemplatedView.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.ContentView.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.ContentView.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.RadioButton.ArrangeOverride(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.RadioButton.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
*REMOVED*override Microsoft.Maui.Controls.FlexLayout.MeasureOverride(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Controls.ToolTipProperties.GetText(Microsoft.Maui.Controls.BindableObject! bindable) -> object!
static Microsoft.Maui.Controls.ToolTipProperties.SetText(Microsoft.Maui.Controls.BindableObject! bindable, object! value) -> void
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandParameterProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerEnteredCommandProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandParameterProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerExitedCommandProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandParameterProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.PointerGestureRecognizer.PointerMovedCommandProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.ToolTipProperties.TextProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.VisualElement.ZIndexProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.HeightProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.MaximumHeightProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.MaximumWidthProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.MinimumHeightProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.MinimumWidthProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.WidthProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.XProperty -> Microsoft.Maui.Controls.BindableProperty!
static readonly Microsoft.Maui.Controls.Window.YProperty -> Microsoft.Maui.Controls.BindableProperty!
virtual Microsoft.Maui.Controls.PointerEventArgs.GetPosition(Microsoft.Maui.Controls.Element? relativeTo) -> Microsoft.Maui.Graphics.Point?
virtual Microsoft.Maui.Controls.TappedEventArgs.GetPosition(Microsoft.Maui.Controls.Element? relativeTo) -> Microsoft.Maui.Graphics.Point?
~Microsoft.Maui.Controls.MenuFlyout.Add(Microsoft.Maui.IMenuElement item) -> void
~Microsoft.Maui.Controls.MenuFlyout.Contains(Microsoft.Maui.IMenuElement item) -> bool
~Microsoft.Maui.Controls.MenuFlyout.CopyTo(Microsoft.Maui.IMenuElement[] array, int arrayIndex) -> void
~Microsoft.Maui.Controls.MenuFlyout.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.IMenuElement>
~Microsoft.Maui.Controls.MenuFlyout.IndexOf(Microsoft.Maui.IMenuElement item) -> int
~Microsoft.Maui.Controls.MenuFlyout.Insert(int index, Microsoft.Maui.IMenuElement item) -> void
~Microsoft.Maui.Controls.MenuFlyout.Remove(Microsoft.Maui.IMenuElement item) -> bool
~Microsoft.Maui.Controls.MenuFlyout.this[int index].get -> Microsoft.Maui.IMenuElement
~Microsoft.Maui.Controls.MenuFlyout.this[int index].set -> void
~static Microsoft.Maui.Controls.FlyoutBase.GetContextFlyout(Microsoft.Maui.Controls.BindableObject b) -> Microsoft.Maui.Controls.FlyoutBase
~static Microsoft.Maui.Controls.FlyoutBase.SetContextFlyout(Microsoft.Maui.Controls.BindableObject b, Microsoft.Maui.Controls.FlyoutBase value) -> void
~static readonly Microsoft.Maui.Controls.FlyoutBase.ContextFlyoutProperty -> Microsoft.Maui.Controls.BindableProperty
static readonly Microsoft.Maui.Controls.TapGestureRecognizer.ButtonsProperty -> Microsoft.Maui.Controls.BindableProperty!
*REMOVED*Microsoft.Maui.Controls.TapGestureRecognizer.Tapped -> System.EventHandler
~Microsoft.Maui.Controls.Handlers.Compatibility.CellWrapperTemplate.CellWrapperTemplate(Microsoft.Maui.Controls.DataTemplate source, Microsoft.Maui.Controls.BindableObject container = null) -> void
~Microsoft.Maui.Controls.Handlers.Compatibility.CellWrapperTemplateSelector.CellWrapperTemplateSelector(Microsoft.Maui.Controls.DataTemplateSelector selector) -> void
~Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.ListViewAdaptor(Microsoft.Maui.Controls.ListView listview, System.Collections.IEnumerable items, Microsoft.Maui.Controls.DataTemplate template) -> void
~Microsoft.Maui.Controls.Handlers.Compatibility.TableViewAdaptor.TableViewAdaptor(Microsoft.Maui.Controls.TableView tableView, System.Collections.IEnumerable items, Microsoft.Maui.Controls.DataTemplate template) -> void
~override Microsoft.Maui.Controls.Handlers.Compatibility.CellWrapperTemplateSelector.OnSelectTemplate(object item, Microsoft.Maui.Controls.BindableObject container) -> Microsoft.Maui.Controls.DataTemplate
~override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.CreateFooterView() -> Microsoft.Maui.Controls.View
~override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewAdaptor.CreateHeaderView() -> Microsoft.Maui.Controls.View
~override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.OnElementChanged(Microsoft.Maui.Controls.Platform.ElementChangedEventArgs<Microsoft.Maui.Controls.ListView> e) -> void
~override Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.OnElementPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) -> void
~override Microsoft.Maui.Controls.Handlers.Compatibility.TableViewRenderer.OnElementChanged(Microsoft.Maui.Controls.Platform.ElementChangedEventArgs<Microsoft.Maui.Controls.TableView> e) -> void
~static Microsoft.Maui.Controls.Handlers.Compatibility.CellContentFactory.CreateContent(object data, Microsoft.Maui.Controls.BindableObject container = null) -> Microsoft.Maui.Controls.View
~static Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.Controls.ListView, Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer>
~static Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer.Mapper -> Microsoft.Maui.PropertyMapper<Microsoft.Maui.Controls.ListView, Microsoft.Maui.Controls.Handlers.Compatibility.ListViewRenderer>
