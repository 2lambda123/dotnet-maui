using System.Linq;
using System.Text;

using Microsoft.CodeAnalysis;

using static Microsoft.Maui.Controls.SourceGen.Helper;

namespace Microsoft.Maui.Controls.SourceGen
{
	[Generator(LanguageNames.CSharp)]
	public class RouteSourceGenerator : ISourceGenerator
	{
		static readonly string Indent = new string('\x20', 8);
		const string Add = nameof(Add);
		const string TryAdd = nameof(TryAdd);

		const string AutoGeneratedHeaderText = """
			//------------------------------------------------------------------------------
			// <auto-generated>
			//     This code was generated by a .NET MAUI source generator.
			//
			//     Changes to this file may cause incorrect behavior and will be lost if
			//     the code is regenerated.
			// </auto-generated>
			//------------------------------------------------------------------------------
			""";

		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(() => new RouteSyntaxReceiver());
		}

		public void Execute(GeneratorExecutionContext context)
		{
			if (context.SyntaxReceiver is not RouteSyntaxReceiver syntaxReceiver)
			{
				return;
			}

			var mauiApp = syntaxReceiver.MauiApp;
			var mauiStartup = syntaxReceiver.MauiStartup;
			var routedPages = syntaxReceiver.RoutedPages;
			var shellPages = syntaxReceiver.ShellPages;

			if (shellPages.Count() == 0 || routedPages.Count() == 0)
			{
				return;
			}

			var routes = new StringBuilder();
			var services = new StringBuilder();

			var addComment = true;

			foreach (var routedPage in routedPages.Where(x => x.Lifetime == Singleton))
			{
				foreach (var route in routedPage.Routes)
				{
					if (string.IsNullOrEmpty(route))
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute(nameof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}), typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
					}
					else
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute({route}, typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
					}
				}

				if (addComment)
				{
					addComment = false;
					services.AppendLine($"// Singleton Services");
				}

				if (routedPage.ImplicitViewModel)
				{
					services.AppendLine($"{Indent}builder.Services.AddSingleton<{routedPage.Type.Identifier.ValueText.Replace("Page", "ViewModel")}>();");
				}
				else if (!string.IsNullOrEmpty(routedPage.ViewModelType))
				{
					services.AppendLine($"{Indent}builder.Services.AddSingleton<{routedPage.ViewModelType}>();");
				}

				services.AppendLine($"{Indent}builder.Services.AddSingleton<global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}>();");
			}

			foreach (var service in syntaxReceiver.Services.Where(x => x.Lifetime == Singleton))
			{
				if (string.IsNullOrEmpty(service.RegisterFor))
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Singleton<global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
				else
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Singleton<{service.RegisterFor}, global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
			}

			if (!addComment)
			{
				addComment = true;
				services.AppendLine();
			}

			foreach (var scopedView in routedPages.Where(x => x.Lifetime == Scoped))
			{
				foreach (var route in scopedView.Routes)
				{
					if (string.IsNullOrEmpty(route))
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute(nameof(global::{GetNamespace(scopedView.Type)}.{scopedView.Type.Identifier}), typeof(global::{GetNamespace(scopedView.Type)}.{scopedView.Type.Identifier}));");
					}
					else
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute({route}, typeof(global::{GetNamespace(scopedView.Type)}.{scopedView.Type.Identifier}));");
					}
				}

				if (addComment)
				{
					addComment = false;
					services.AppendLine($"{Indent}// Scoped Services");
				}

				if (scopedView.ImplicitViewModel)
				{
					services.AppendLine($"{Indent}builder.Services.AddScoped<{scopedView.Type.Identifier.ValueText.Replace("Page", "ViewModel")}>();");
				}
				else if (!string.IsNullOrEmpty(scopedView.ViewModelType))
				{
					services.AppendLine($"{Indent}builder.Services.AddScoped<{scopedView.ViewModelType}>();");
				}

				services.AppendLine($"{Indent}builder.Services.AddScoped<global::{GetNamespace(scopedView.Type)}.{scopedView.Type.Identifier}>();");
			}

			foreach (var service in syntaxReceiver.Services.Where(x => x.Lifetime == Scoped))
			{
				if (string.IsNullOrEmpty(service.RegisterFor))
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Scoped<global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
				else
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Scoped<{service.RegisterFor}, global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
			}

			if (!addComment)
			{
				addComment = true;
				services.AppendLine();
			}

			foreach (var transientView in routedPages.Where(x => x.Lifetime == Transient))
			{
				foreach (var route in transientView.Routes)
				{
					if (string.IsNullOrEmpty(route))
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute(nameof(global::{GetNamespace(transientView.Type)}.{transientView.Type.Identifier}), typeof(global::{GetNamespace(transientView.Type)}.{transientView.Type.Identifier}));");
					}
					else
					{
						routes.AppendLine($"{Indent}Routing.RegisterRoute({route}, typeof(global::{GetNamespace(transientView.Type)}.{transientView.Type.Identifier}));");
					}
				}

				if (addComment)
				{
					addComment = false;
					services.AppendLine($"{Indent}// Transient Services");
				}

				if (transientView.ImplicitViewModel)
				{
					services.AppendLine($"{Indent}builder.Services.AddTransient<{transientView.Type.Identifier.ValueText.Replace("Page", "ViewModel")}>();");
				}
				else if (!string.IsNullOrEmpty(transientView.ViewModelType))
				{
					services.AppendLine($"{Indent}builder.Services.AddTransient<{transientView.ViewModelType}>();");
				}

				services.AppendLine($"{Indent}builder.Services.AddTransient<global::{GetNamespace(transientView.Type)}.{transientView.Type.Identifier}>();");
			}

			foreach (var service in syntaxReceiver.Services.Where(x => x.Lifetime == Transient))
			{
				if (string.IsNullOrEmpty(service.RegisterFor))
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Transient<global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
				else
				{
					services.AppendLine($"{Indent}builder.Services.{(service.UseTryAdd ? TryAdd : Add)}Transient<{service.RegisterFor}, global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
				}
			}

			string shellRoutes;

			//namespace {{GetNamespace(mauiApp)}};
			//partial class {{mauiApp.Identifier.ValueText}}

			//if (mauiApp is not null)
			foreach (var shellPage in shellPages)
			{
				//context.AddSource($"{mauiApp.Identifier.ValueText}.sg.cs", $$"""
				shellRoutes = $$"""
				{{AutoGeneratedHeaderText}}

				namespace {{GetNamespace(shellPage)}};

				partial class {{shellPage.Identifier.ValueText}}
				{
				    static partial void RegisterRoutes();

				    static partial void RegisterRoutes()
				    {
				        {{routes.ToString().Trim()}}
				    }
				}

				""";
				//""");

				context.AddSource($"{shellPage.Identifier.ValueText}.sg.cs", shellRoutes);
			}

			if (mauiStartup is not null)
			{
				context.AddSource("MauiProgram.sg.cs", $$"""
				{{AutoGeneratedHeaderText}}

				using Microsoft.Extensions.DependencyInjection;
				
				namespace {{GetNamespace(mauiStartup)}};

				static partial class MauiProgram
				{
				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder);

				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder)
				    {
				        {{services.ToString().Trim()}}
				    }
				}

				""");
			}
		}
	}
}
