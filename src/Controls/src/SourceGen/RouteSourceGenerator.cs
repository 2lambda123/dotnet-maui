using System.Linq;
using System.Text;

using Microsoft.CodeAnalysis;

using static Microsoft.Maui.Controls.SourceGen.Helper;

namespace Microsoft.Maui.Controls.SourceGen
{
	//[Generator(LanguageNames.CSharp)]
	public class RouteSourceGenerator : ISourceGenerator
	{
		static readonly string Indent = new string('\x20', 8);
		const string AutoGeneratedHeaderText = """
			//------------------------------------------------------------------------------
			// <auto-generated>
			//     This code was generated by a .NET MAUI source generator.
			//
			//     Changes to this file may cause incorrect behavior and will be lost if
			//     the code is regenerated.
			// </auto-generated>
			//------------------------------------------------------------------------------
			""";

		public void Initialize(GeneratorInitializationContext context)
		{
			//#if DEBUG
			//			if (!System.Diagnostics.Debugger.IsAttached)
			//			{
			//				System.Diagnostics.Debugger.Launch();
			//			}
			//#endif
			context.RegisterForSyntaxNotifications(() => new RouteSyntaxReceiver());
		}

		public void Execute(GeneratorExecutionContext context)
		{
			if (context.SyntaxReceiver is not RouteSyntaxReceiver syntaxReceiver)
			{
				return;
			}

			var mauiApp = syntaxReceiver.MauiApp;
			var mauiStartup = syntaxReceiver.MauiStartup;
			var routedPages = syntaxReceiver.RoutedPages;
			var shellPages = syntaxReceiver.ShellPages;

			var routes = new StringBuilder();
			var services = new StringBuilder();

			GenerateCode(context, syntaxReceiver, ref routes, ref services, Singleton);
			GenerateCode(context, syntaxReceiver, ref routes, ref services, Scoped);
			GenerateCode(context, syntaxReceiver, ref routes, ref services, Transient);

			string shellRoutes;

			foreach (var shellPage in shellPages)
			{
				shellRoutes = $$"""
				{{AutoGeneratedHeaderText}}

				namespace {{GetNamespace(shellPage)}};

				partial class {{shellPage.Identifier.ValueText}}
				{
				    static partial void RegisterRoutes();

				    static partial void RegisterRoutes()
				    {
				        {{routes.ToString().Trim()}}
				    }
				}

				""";

				context.AddSource($"{shellPage.Identifier.ValueText}.sg.cs", shellRoutes);
			}

			if (mauiStartup is not null)
			{
				context.AddSource("MauiProgram.sg.cs", $$"""
				{{AutoGeneratedHeaderText}}

				using Microsoft.Extensions.DependencyInjection;
				
				namespace {{GetNamespace(mauiStartup)}};

				static partial class MauiProgram
				{
				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder);

				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder)
				    {
				        {{services.ToString().Trim()}}
				    }
				}

				""");
			}

			static void GenerateCode(GeneratorExecutionContext context, RouteSyntaxReceiver syntaxReceiver, ref StringBuilder routes, ref StringBuilder services, string lifetime)
			{
				if (lifetime is null)
				{
					return;
				}

				var addComment = true;
				SymbolInfo symbolInfo;

				foreach (var routedPage in syntaxReceiver.RoutedPages.Where(x => x.Lifetime == lifetime))
				{
					foreach (var route in routedPage.Routes)
					{
						if (string.IsNullOrEmpty(route))
						{
							routes.AppendLine($"{Indent}Routing.RegisterRoute(nameof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}), typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
						}
						else
						{
							routes.AppendLine($"{Indent}Routing.RegisterRoute({route}, typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
						}
					}

					if (addComment)
					{
						addComment = false;
						services.AppendLine($"{Indent}// {lifetime} Services");
					}

					switch (routedPage.ViewModelType)
					{
						case not null:
							symbolInfo = context.Compilation.GetSemanticModel(routedPage.ViewModelType.SyntaxTree).GetSymbolInfo(routedPage.ViewModelType);
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<global::{symbolInfo.Symbol}>();");
							break;
						default:
							if (routedPage.ImplicitViewModel)
							{
								services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<{routedPage.Type.Identifier.ValueText.Replace("Page", "ViewModel")}>();");
							}
							break;
					}

					services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}>();");
				}

				foreach (var service in syntaxReceiver.Services.Where(x => x.Lifetime == lifetime))
				{
					if (addComment)
					{
						addComment = false;
						services.AppendLine($"{Indent}// {lifetime} Services");
					}

					switch (service.RegisterFor)
					{
						case not null:
							symbolInfo = context.Compilation.GetSemanticModel(service.RegisterFor.SyntaxTree).GetSymbolInfo(service.RegisterFor);
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime, service.UseTryAdd)}<global::{symbolInfo.Symbol}, global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
							break;
						default:
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime, service.UseTryAdd)}<global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
							break;
					}
				}

				if (!addComment)
				{
					services.AppendLine();
				}
			}

			static string ServiceMethod(string lifetime, bool useTryAdd = false)
				=> useTryAdd ? $"TryAdd{lifetime}" : $"Add{lifetime}";
		}
	}
}
