using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.Maui.Controls.SourceGen.Helper;

namespace Microsoft.Maui.Controls.SourceGen
{
	[Generator(LanguageNames.CSharp)]
	public partial class RouteIncrementalGenerator : IIncrementalGenerator
	{
		static readonly string Indent = new string('\x20', 8);
		const string AutoGeneratedHeaderText = """
			//------------------------------------------------------------------------------
			// <auto-generated>
			//     This code was generated by a .NET MAUI source generator.
			//
			//     Changes to this file may cause incorrect behavior and will be lost if
			//     the code is regenerated.
			// </auto-generated>
			//------------------------------------------------------------------------------
			""";

		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var classDeclarations = context.CompilationProvider.Combine(context.SyntaxProvider.CreateSyntaxProvider(
					static (node, _) => node is ClassDeclarationSyntax,
					static (ctx, _) => GetSemanticTargetForGeneration(ctx))
				.Where(static x => x is not null)
				.Collect());

			context.RegisterSourceOutput(classDeclarations, (spc, source) => Execute(spc, source.Left, source.Right));
		}

		private static ClassDeclarationSyntax? GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
		{
			if (context.Node is not ClassDeclarationSyntax cds)
			{
				return null;
			}

			if (cds.Identifier.ValueText == "MauiProgram")
			{
				foreach (var member in cds.Members)
				{
					if (member is MethodDeclarationSyntax { Identifier.ValueText: "CreateMauiApp" })
					{
						return cds;
					}
				}
			}

			var routeAttribute = cds.AttributeLists.SelectMany(x => x.Attributes)
				.Where(a => a.Name.NormalizeWhitespace().ToFullString() == "Route")
				.FirstOrDefault();

			if (routeAttribute is not null)
			{
				return cds;
			}

			var serviceAttribute = cds.AttributeLists.SelectMany(x => x.Attributes)
				.Where(a => a.Name.NormalizeWhitespace().ToFullString() == "MauiService")
				.FirstOrDefault();

			if (serviceAttribute is not null)
			{
				return cds;
			}

			if (cds.BaseList is not null)
			{
				foreach (var baseType in cds.BaseList.Types)
				{
					if (baseType.Type is IdentifierNameSyntax identifierName)
					{
						return identifierName.Identifier.ValueText switch
						{
							"Application" => cds,
							"Shell" => cds,
							_ => null,
						};
					}
				}
			}

			return null;
		}

		private static void Execute(SourceProductionContext context, Compilation compilation, ImmutableArray<ClassDeclarationSyntax?> classes)
		{
			if (classes.IsDefaultOrEmpty)
			{
				return;
			}

			var mauiApp = GetMauiApp(classes);
			var mauiStartup = GetMauiStartup(classes);
			var mauiServices = GetMauiServices(classes);
			var routedPages = GetRoutedPages(classes);
			var shellPages = GetShellPages(classes);

			var routes = new StringBuilder();
			var services = new StringBuilder();

			GenerateCode(compilation, routedPages, mauiServices, ref routes, ref services, Singleton);
			GenerateCode(compilation, routedPages, mauiServices, ref routes, ref services, Scoped);
			GenerateCode(compilation, routedPages, mauiServices, ref routes, ref services, Transient);

			string shellRoutes;

			foreach (var shellPage in shellPages)
			{
				shellRoutes = $$"""
				{{AutoGeneratedHeaderText}}

				namespace {{GetNamespace(shellPage)}};

				partial class {{shellPage.Identifier.ValueText}}
				{
				    static partial void RegisterRoutes();

				    static partial void RegisterRoutes()
				    {
				        {{routes.ToString().Trim()}}
				    }
				}

				""";

				context.AddSource($"{shellPage.Identifier.ValueText}.sg.cs", shellRoutes);
			}

			if (mauiStartup is not null)
			{
				context.AddSource("MauiProgram.sg.cs", $$"""
				{{AutoGeneratedHeaderText}}

				using Microsoft.Extensions.DependencyInjection;
				
				namespace {{GetNamespace(mauiStartup)}};

				static partial class MauiProgram
				{
				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder);

				    static partial void ConfigureDependencies(this global::Microsoft.Maui.Hosting.MauiAppBuilder builder)
				    {
				        {{services.ToString().Trim()}}
				    }
				}

				""");
			}

			static void GenerateCode(Compilation compilation, IEnumerable<RoutedPage> routedPages, IEnumerable<Service> mauiServices, ref StringBuilder routes, ref StringBuilder services, string lifetime)
			{
				if (lifetime is null)
				{
					return;
				}

				var addComment = true;
				SymbolInfo symbolInfo;

				foreach (var routedPage in routedPages.Where(x => x.Lifetime == lifetime))
				{
					foreach (var route in routedPage.Routes)
					{
						if (string.IsNullOrEmpty(route))
						{
							routes.AppendLine($"{Indent}Routing.RegisterRoute(nameof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}), typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
						}
						else
						{
							routes.AppendLine($"{Indent}Routing.RegisterRoute({route}, typeof(global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}));");
						}
					}

					if (addComment)
					{
						addComment = false;
						services.AppendLine($"{Indent}// {lifetime} Services");
					}

					switch (routedPage.ViewModelType)
					{
						case not null:
							symbolInfo = compilation.GetSemanticModel(routedPage.ViewModelType.SyntaxTree).GetSymbolInfo(routedPage.ViewModelType);
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<global::{symbolInfo.Symbol}>();");
							break;
						default:
							if (routedPage.ImplicitViewModel)
							{
								services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<{routedPage.Type.Identifier.ValueText.Replace("Page", "ViewModel")}>();");
							}
							break;
					}

					services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime)}<global::{GetNamespace(routedPage.Type)}.{routedPage.Type.Identifier}>();");
				}

				foreach (var service in mauiServices.Where(x => x.Lifetime == lifetime))
				{
					if (addComment)
					{
						addComment = false;
						services.AppendLine($"{Indent}// {lifetime} Services");
					}

					switch (service.RegisterFor)
					{
						case not null:
							symbolInfo = compilation.GetSemanticModel(service.RegisterFor.SyntaxTree).GetSymbolInfo(service.RegisterFor);
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime, service.UseTryAdd)}<global::{symbolInfo.Symbol}, global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
							break;
						default:
							services.AppendLine($"{Indent}builder.Services.{ServiceMethod(lifetime, service.UseTryAdd)}<global::{GetNamespace(service.Type)}.{service.Type.Identifier}>();");
							break;
					}
				}

				if (!addComment)
				{
					services.AppendLine();
				}
			}

			static string ServiceMethod(string lifetime, bool useTryAdd = false)
				=> useTryAdd ? $"TryAdd{lifetime}" : $"Add{lifetime}";
		}

		private static IEnumerable<RoutedPage> GetRoutedPages(ImmutableArray<ClassDeclarationSyntax?> classDeclarations)
		{
			var routedPages = new List<RoutedPage>();

			foreach (var cds in classDeclarations)
			{
				if (cds is null)
				{
					continue;
				}

				var routeAttribute = cds.AttributeLists.SelectMany(x => x.Attributes)
					.Where(a => a.Name.NormalizeWhitespace().ToFullString() == "Route")
					.FirstOrDefault();

				if (routeAttribute is not null)
				{
					TypeSyntax? viewModelType = null;
					var implicitViewModel = false;
					var route = string.Empty;
					var lifetime = Singleton;
					var shellRoutes = new List<string>();

					var routeArgument = true;

					IEnumerable<AttributeArgumentSyntax>? arguments = routeAttribute.ArgumentList?.Arguments;

					if (arguments is not null)
					{
						lifetime = Singleton;

						var argWithoutName = arguments.Count(a => a.NameColon is null && a.NameEquals is null);

						foreach (var argument in arguments)
						{
							if (argument.NameColon is not null)
							{
								if (argument.NameColon.Name.Identifier.Text == "route")
								{
									route = GetRoute(cds, argument.Expression);
								}
								else if (argument.NameColon.Name.Identifier.Text == "lifetime")
								{
									lifetime = GetLifetime(argument.Expression);
								}
							}
							else if (argument.NameEquals is not null)
							{
								if (argument.NameEquals.Name.Identifier.Text == "Routes")
								{
									if (argument.Expression is ImplicitArrayCreationExpressionSyntax implicitArrayCreationExpression)
									{
										if (implicitArrayCreationExpression.Initializer.Kind() == SyntaxKind.ArrayInitializerExpression)
										{
											foreach (var expression in implicitArrayCreationExpression.Initializer.Expressions)
											{
												shellRoutes.Add(GetRoute(cds, expression));
											}
										}
									}
									else if (argument.Expression is ArrayCreationExpressionSyntax arrayCreationExpression)
									{
										if (arrayCreationExpression?.Initializer?.Kind() == SyntaxKind.ArrayInitializerExpression)
										{
											foreach (var expression in arrayCreationExpression.Initializer.Expressions)
											{
												shellRoutes.Add(GetRoute(cds, expression));
											}
										}
									}
								}
								else if (argument.NameEquals.Name.Identifier.Text == "Lifetime")
								{
									lifetime = GetLifetime(argument.Expression);
								}
								else if (argument.NameEquals.Name.Identifier.Text == "ImplicitViewModel")
								{
									if (argument.Expression is LiteralExpressionSyntax literalExpression)
									{
										_ = bool.TryParse(literalExpression.Token.ValueText, out implicitViewModel);
									}
								}
								else if (argument.NameEquals.Name.Identifier.Text == "ViewModelType")
								{
									if (argument.Expression is TypeOfExpressionSyntax typeofExpression)
									{
										//viewModelType = $"global::{GetNamespace(cds)}.{((IdentifierNameSyntax)typeofExpression.Type).Identifier.Text}";
										//viewModelType = ((IdentifierNameSyntax)typeofExpression.Type).Identifier.Text;
										viewModelType = typeofExpression.Type;
									}
								}
							}
							else if (argument.Expression is not null)
							{
								if (argWithoutName == 1)
								{
									if (argument.Expression.IsKind(SyntaxKind.StringLiteralExpression)
										|| argument.Expression.IsKind(SyntaxKind.SimpleMemberAccessExpression))
									{
										route = GetRoute(cds, argument.Expression);
									}
									else
									{
										lifetime = GetLifetime(argument.Expression);
									}
								}
								else
								{
									if (routeArgument)
									{
										routeArgument = false;
										route = GetRoute(cds, argument.Expression);
									}
									else
									{
										lifetime = GetLifetime(argument.Expression);
									}
								}
							}
						}
					}

					if (shellRoutes.Count == 0)
					{
						shellRoutes.Add(route);
					}

					routedPages.Add(new RoutedPage(cds, shellRoutes, lifetime, implicitViewModel, viewModelType));
				}
			}

			return routedPages;
		}

		private static IEnumerable<ClassDeclarationSyntax> GetShellPages(ImmutableArray<ClassDeclarationSyntax?> classDeclarations)
		{
			var shellPages = new List<ClassDeclarationSyntax>();

			foreach (var cds in classDeclarations)
			{
				if (cds is null)
				{
					continue;
				}

				if (cds.BaseList is not null)
				{
					foreach (var baseType in cds.BaseList.Types)
					{
						if (baseType.Type is IdentifierNameSyntax { Identifier.ValueText: "Shell" })
						{
							shellPages.Add(cds);
							break;
						}
					}
				}
			}

			return shellPages;
		}

		private static IEnumerable<Service> GetMauiServices(ImmutableArray<ClassDeclarationSyntax?> classDeclarations)
		{
			var services = new List<Service>();

			foreach (var cds in classDeclarations)
			{
				if (cds is null)
				{
					continue;
				}

				IEnumerable<AttributeArgumentSyntax>? arguments;

				var serviceAttribute = cds.AttributeLists.SelectMany(al => al.Attributes)
					.Where(a => a.Name.NormalizeWhitespace().ToFullString().Replace("Attribute", string.Empty) == "MauiService")
					.FirstOrDefault();

				if (serviceAttribute is not null)
				{
					arguments = serviceAttribute.ArgumentList?.Arguments;

					var lifetime = Singleton;
					TypeSyntax? registerFor = null;
					var useTryAdd = false;

					if (arguments is not null)
					{
						foreach (var argument in arguments)
						{
							if (argument.NameColon?.Name.Identifier.Text == "lifetime")
							{
								lifetime = GetLifetime(argument.Expression);
							}

							switch (argument.NameEquals?.Name.Identifier.Text)
							{
								case "RegisterFor" when argument.Expression is TypeOfExpressionSyntax typeOfExpression:
									registerFor = typeOfExpression.Type;
									break;
								case "UseTryAdd" when argument.Expression is LiteralExpressionSyntax literalExpression:
									_ = bool.TryParse(literalExpression.Token.ValueText, out useTryAdd);
									break;
							}

							if (argument.Expression is not null)
							{
								lifetime = GetLifetime(argument.Expression);
							}
						}
					}

					services.Add(new Service(cds, lifetime, registerFor, useTryAdd));
				}
			}

			return services;
		}

		private static ClassDeclarationSyntax? GetMauiApp(ImmutableArray<ClassDeclarationSyntax?> classDeclarations)
		{
			foreach (var cds in classDeclarations)
			{
				if (cds is null)
				{
					continue;
				}

				if (cds.BaseList is not null)
				{
					foreach (var baseType in cds.BaseList.Types)
					{
						if (baseType.Type is IdentifierNameSyntax { Identifier.ValueText: "Application" })
						{
							return cds;
						}
					}
				}
			}

			return null;
		}

		private static ClassDeclarationSyntax? GetMauiStartup(ImmutableArray<ClassDeclarationSyntax?> classDeclarations)
		{
			foreach (var cds in classDeclarations)
			{
				if (cds is null)
				{
					continue;
				}

				if (cds.Identifier.ValueText == "MauiProgram")
				{
					foreach (var member in cds.Members)
					{
						if (member is MethodDeclarationSyntax { Identifier.ValueText: "CreateMauiApp" })
						{
							return cds;
						}
					}
				}
			}

			return null;
		}

		private static string GetRoute(ClassDeclarationSyntax classDeclaration, ExpressionSyntax? expression) => expression switch
		{
			LiteralExpressionSyntax literalExpression => $"\"{literalExpression.Token.ValueText}\"",
			InvocationExpressionSyntax invocationExpression => ((IdentifierNameSyntax)invocationExpression.Expression).Identifier.Text switch
			{
				"nameof" => $"nameof(global::{GetNamespace(classDeclaration)}.{invocationExpression.ArgumentList.Arguments})",
				_ => string.Empty,// Default route
			},
			MemberAccessExpressionSyntax memberAccessExpression => $"{((IdentifierNameSyntax)memberAccessExpression.Expression).Identifier.Text}.{memberAccessExpression.Name.Identifier.Text}",
			_ => string.Empty,// Default route
		};

		private static string GetLifetime(ExpressionSyntax? expression) => expression switch
		{
			IdentifierNameSyntax identifierName => identifierName.Identifier.ValueText,
			MemberAccessExpressionSyntax memberAccessExpression => memberAccessExpression.Name.Identifier.Text,
			_ => Singleton
		};
	}

	internal class RoutedPage
	{
		public RoutedPage(
			ClassDeclarationSyntax type,
			IEnumerable<string> routes,
			string lifetime,
			bool implicitViewModel = false,
			TypeSyntax? viewModelType = null)
		{
			Type = type;
			Routes = routes;
			Lifetime = lifetime;
			ImplicitViewModel = implicitViewModel;
			ViewModelType = viewModelType;
		}

		public ClassDeclarationSyntax Type { get; }

		public IEnumerable<string> Routes { get; }

		public string Lifetime { get; }

		public bool ImplicitViewModel { get; }

		public TypeSyntax? ViewModelType { get; }
	}

	internal class Service
	{
		public Service(ClassDeclarationSyntax type, string lifetime, TypeSyntax? registerFor, bool useTryAdd)
			=> (Type, Lifetime, RegisterFor, UseTryAdd) = (type, lifetime, registerFor, useTryAdd);

		public ClassDeclarationSyntax Type { get; }

		public string Lifetime { get; }

		public TypeSyntax? RegisterFor { get; }

		public bool UseTryAdd { get; }
	}
}
