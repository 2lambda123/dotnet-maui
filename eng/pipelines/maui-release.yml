trigger:
  branches:
    include:
    - main
    - release/*
  tags:
    include:
    - '*'
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

schedules:
- cron: "0 5 * * *"
  displayName: Run daily at 5:00 UTC
  branches:
    include:
    - main

variables:
  - template: /eng/pipelines/common/variables.yml@self
  - template: templates/common/vs-release-vars.yml@sdk-insertions

parameters:
  - name: pushMauiPackagesToMaestro
    default: true

  - name: provisionatorChannel
    displayName: 'Provisionator channel'
    type: string
    default: 'latest'           # Support for launching a build against a Provisionator PR (e.g., pr/[github-account-name]/[pr-number]) as a means to test in-progress Provisionator changes

  - name: VM_IMAGE_HOST
    type: object
    default:
      name: MAUI-1ESPT
      image: 1ESPT-Windows2022
      os: windows

  - name: PackPlatform
    type: object
    default:
      name: Windows
      artifact: nuget
      binariesArtifact: pack-binaries
      metadataArtifact: metadata
      logsArtifact: logs
      docsArtifact: xml-docs

  - name: Skip1ESComplianceTasks
    default: false

resources:
  repositories:
    - repository: yaml-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main
    - repository: sdk-insertions
      type: github
      name: xamarin/sdk-insertions
      ref: refs/heads/main
      endpoint: xamarin
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool: ${{ parameters.VM_IMAGE_HOST }}
    sdl:
      ${{ if eq('${{ parameters.Skip1ESComplianceTasks }}', 'true') }}:
        enableAllTools: false
      binskim:
        scanOutputDirectoryOnly: true
      codeql:
        runSourceLanguagesInSourceAnalysis: true
      policheck:
        enabled: true
      spotBugs:
        enabled: false
        justification: 'Failing with "Could not successfully find the java tool launcher"'
      sourceRepositoriesToScan:
        exclude:
        - repository: yaml-templates
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\eng\automation\guardian\source.gdnsuppress
    stages:
      - stage: pack_net
        displayName: Pack .NET MAUI
        dependsOn: []
        jobs:
          - job: pack_net_${{ parameters.PackPlatform.name }}
            workspace:
              clean: all
            displayName: ${{ parameters.PackPlatform.name }}
            timeoutInMinutes: 240
           
            pool: ${{ parameters.VM_IMAGE_HOST }}
              
            templateContext:
              outputs:
                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.artifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.artifact }}
                  targetPath: '$(Build.ArtifactStagingDirectory)/nuget'
                
                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.binariesArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.binariesArtifact }}
                  targetPath: '$(System.DefaultWorkingDirectory)/artifacts/binaries'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.docsArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.docsArtifact }}
                  targetPath: '$(System.DefaultWorkingDirectory)/artifacts/docs-packs'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.metadataArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.metadataArtifact }}
                  targetPath: '$(Build.ArtifactStagingDirectory)/metadata'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.logsArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.logsArtifact }}
                  targetPath: '$(Build.ArtifactStagingDirectory)/logs'
            
            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.cmd -ci
              - name: _BuildConfig
                value: Release
              - name: _BuildOfficalId
                value: $[ format('{0}.{1}', format('{0:yyyyMMdd}', pipeline.startTime), counter(format('{0:yyyyMMdd}', pipeline.startTime), 1) )]
            
            steps:
              - template: /eng/pipelines/common/pack.yml@self
                parameters:
                  publishArtifacts: false
                  platform: ${{ parameters.PackPlatform.name }}
                  provisionatorChannel: ${{ parameters.provisionatorChannel }}
                  artifact: ${{ parameters.PackPlatform.artifact }}
                  artifactBinaries: ${{ parameters.PackPlatform.binariesArtifact }}
                  artifactsPath: '$(Build.ArtifactStagingDirectory)'
                  buildConfiguration: $(_BuildConfig)
                  dotnetScript: $(Build.SourcesDirectory)/dotnet.cmd
                  buildScript: $(_buildScript)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  officialBuildId: $(_BuildOfficalId)
                  prepareSteps:
                    - template: /eng/pipelines/common/provision.yml@self
                      parameters:
                        checkoutDirectory: '$(System.DefaultWorkingDirectory)'
                        provisionatorChannel: ${{ parameters.provisionatorChannel }}
                        gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
                        skipAndroidImages: true

      - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:                           # Sign only using the private server   
        - template: /eng/pipelines/common/sign.yml@self                                 
          parameters:
            dependsOn: ['pack_net']
            stageName: 'nuget_signing'
            poolName: ${{ parameters.VM_IMAGE_HOST.name }}
            vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
            os: ${{ parameters.VM_IMAGE_HOST.os }}                                   
        
        - template: /eng/pipelines/common/insertion.yml@self                                # Insert on VS and SDK
          parameters:
            dependsOn: ['nuget_signing']
            stageName: 'sdk_insertion'
            poolName: ${{ parameters.VM_IMAGE_HOST.name }}
            vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
            os: ${{ parameters.VM_IMAGE_HOST.os }}
            pushMauiPackagesToMaestro: ${{ parameters.pushMauiPackagesToMaestro }}

        - template: /eng/pipelines/common/apiscan.yml@self                                  # ApiScan
          parameters:
            dependsOn: ['pack_net']
            poolName: ${{ parameters.VM_IMAGE_HOST.name }}
            vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
            os: ${{ parameters.VM_IMAGE_HOST.os }}     
            scanArtifacts: ['${{ parameters.PackPlatform.binariesArtifact }}']

        - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
          - stage: nightly
            displayName: Nightly
            dependsOn: ['sdk_insertion']
            jobs:
            - job: push_nightly
              displayName: Push to nightly feed
              pool: ${{ parameters.VM_IMAGE_HOST }}
              workspace:
                clean: all
              timeoutInMinutes: 60
              steps:
              - checkout: none

              - task: UseDotNet@2
                displayName: Use .NET 8.x
                inputs:
                  version: 8.x

              - task: AzureCLI@2
                displayName: Update service connection with managed identity
                inputs:
                  azureSubscription: maui-nightly-feed-mi
                  scriptType: ps
                  scriptLocation: inlineScript
                  inlineScript: |
                    $accessToken = az account get-access-token --query accessToken --resource $(MauiNightlyFeedMIResourceId) -o tsv
                    Write-Host "##vso[task.setsecret]$accessToken"
                    Write-Host "Overwriting authorization token for the maui-nightly-feed service connection"
                    # https://learn.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=bash#setendpoint-modify-a-service-connection-field
                    Write-Host "##vso[task.setendpoint id=$(MauiNightlyFeedServiceConnectionId);field=authParameter;key=apitoken]${accessToken}"

              - task: NuGetAuthenticate@1
                displayName: NuGet Authenticate using managed identity token
                inputs:
                  nuGetServiceConnections: maui-nightly-feed

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: nuget-signed
                  downloadPath: $(Build.StagingDirectory)\nuget-signed
                displayName: Download nuget-signed

             - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: vs-msi-nugets
                  downloadPath: $(Build.StagingDirectory)\nuget-signed
                displayName: Download vs-msi-nugets

              - powershell: |
                  $feed = "$env:NUGET_FEED_MAUI_NIGHTLY"
                  # Signed maui packages except manifest
                  $nupkgs = (Get-ChildItem -Path "$(Build.StagingDirectory)\nuget-signed\" -Filter *.nupkg) | Where-Object { $_.BaseName -notlike 'Microsoft.NET.Sdk.Maui.Manifest-*' }
                  $maxAttempts = 5
                  foreach($nupkg in $nupkgs) {
                      $nupkgFile = $nupkg.FullName
                      $attempt = 1
                      $waiting = $true
                      do {
                          try {
                              Write-Output "dotnet push $nupkgFile"
                              & dotnet nuget push --source $feed --api-key az --skip-duplicate $nupkgFile
                              $waiting = $false
                          }
                          catch {
                              if ($attempt -gt $maxAttempts)
                              {
                                throw 'Maximum attempts reached, failing!'
                              }
                              Write-Output "  attempt $attempt of $maxAttempts failed..."
                              $attempt = $attempt + 1
                          }
                      } while ($waiting)
                  }
                displayName: Push nupkg to maui nightly feed
