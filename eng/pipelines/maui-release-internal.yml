trigger:
  branches:
    include:
    - main
    - release/*
  tags:
    include:
    - '*'
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT


variables:
  - template: /eng/pipelines/common/variables.yml@self
  - group: DotNetBuilds storage account read tokens
  - group: AzureDevOps-Artifact-Feeds-Pats
  - name: _InternalRuntimeDownloadArgs
    value: /p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal
           /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)
  # needed for darc (dependency flow) publishing
  - name: _PublishArgs
    value: >-
          /p:DotNetPublishUsingPipelines=true
  - name: _OfficialBuildIdArgs
    value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
  # needed for signing
  - name: _SignType
    value: real
  - name: _SignArgs
    value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
  - name: _Sign
    value: true

parameters:
  - name: pushMauiPackagesToMaestro
    default: true

  - name: provisionatorChannel
    displayName: 'Provisionator channel'
    type: string
    default: 'latest'           # Support for launching a build against a Provisionator PR (e.g., pr/[github-account-name]/[pr-number]) as a means to test in-progress Provisionator changes

  - name: VM_IMAGE_HOST
    type: object
    default:
      name: NetCore1ESPool-Internal
      image: 1es-windows-2022
      os: windows

  - name: PackPlatform
    type: object
    default:
      name: Windows
      artifact: nuget
      binariesArtifact: pack-binaries
      docsArtifact: xml-docs

  - name: Skip1ESComplianceTasks
    default: false

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool: ${{ parameters.VM_IMAGE_HOST }}
    sdl:
      ${{ if eq('${{ parameters.Skip1ESComplianceTasks }}', 'true') }}:
        enableAllTools: false
      binskim:
        scanOutputDirectoryOnly: true
      codeql:
        runSourceLanguagesInSourceAnalysis: true
      policheck:
        enabled: true
      spotBugs:
        enabled: false
        justification: 'Failing with "Could not successfully find the java tool launcher"'
      sourceRepositoriesToScan:
        exclude:
        - repository: yaml-templates
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\eng\automation\guardian\source.gdnsuppress
    stages:
      - stage: pack_net
        displayName: Pack .NET MAUI
        dependsOn: []
        jobs:
          - template: /eng/common/templates/jobs/jobs.yml@self
            parameters:
              enableTelemetry: true
              helixRepo: dotnet/maui
              pool: ${{ parameters.VM_IMAGE_HOST }}
              enablePublishBuildArtifacts: true
              enablePublishBuildAssets: true
              enablePublishUsingPipelines: true
              enableMicrobuild: true
              graphFileGeneration:
                enabled: false
                includeToolset: false

              jobs:
              - job: pack_net_${{ parameters.PackPlatform.name }}
                workspace:
                  clean: all
                displayName: ${{ parameters.PackPlatform.name }}
                timeoutInMinutes: 240
           
                pool: ${{ parameters.VM_IMAGE_HOST }}
              
                templateContext:
                  outputs:
                    - output: pipelineArtifact
                      displayName: 'Publish the ${{ parameters.PackPlatform.artifact }} artifacts'
                      artifactName: ${{ parameters.PackPlatform.artifact }}
                      targetPath: '(Build.ArtifactStagingDirectory)'
                
                    - output: pipelineArtifact
                      displayName: 'Publish the ${{ parameters.PackPlatform.binariesArtifact }} artifacts'
                      artifactName: ${{ parameters.PackPlatform.binariesArtifact }}
                      targetPath: '$(System.DefaultWorkingDirectory)/artifacts/binaries'

                    - output: pipelineArtifact
                      displayName: 'Publish the ${{ parameters.PackPlatform.docsArtifact }} artifacts'
                      artifactName: ${{ parameters.PackPlatform.docsArtifact }}
                      targetPath: '$(System.DefaultWorkingDirectory)/artifacts/docs-packs'

                steps:
                  - template: /eng/pipelines/common/pack.yml@self
                    parameters:
                      publishArtifacts: false
                      platform: ${{ parameters.PackPlatform.name }}
                      provisionatorChannel: ${{ parameters.provisionatorChannel }}
                      artifact: ${{ parameters.PackPlatform.artifact }}
                      artifactBinaries: ${{ parameters.PackPlatform.binariesArtifact }}
                      artifactsPath: '(Build.ArtifactStagingDirectory)'
                  # prepareSteps:
                  #   - template: /eng/pipelines/common/provision.yml@self
                  #     parameters:
                  #       checkoutDirectory: '$(System.DefaultWorkingDirectory)'
                  #       provisionatorChannel: ${{ parameters.provisionatorChannel }}
                  #       gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
                  #       skipAndroidImages: true

      - stage: publish_build_assets
        displayName: Publish to Build Asset Registry
        dependsOn: pack_net
        variables:
        - template: /eng/common/templates-official/variables/pool-providers.yml@self
        jobs:
        # Publish to Build Asset Registry in order to generate the ReleaseConfigs artifact.
        - template: /eng/common/templates-official/job/publish-build-assets.yml@self
          parameters:
            publishUsingPipelines: true
            pool: ${{ parameters.VM_IMAGE_HOST }}

      # Publish and validation steps. Only run in official builds
      - template: /eng/common/templates-official/post-build/post-build.yml@self
        parameters:
          publishingInfraVersion: 3
          validateDependsOn:
            - publish_build_assets
          enableSourceLinkValidation: true
      
      # - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:                           # Sign only using the private server   
      #   - template: /eng/pipelines/common/sign.yml@self                                 
      #     parameters:
      #       dependsOn: ['pack_net']
      #       stageName: 'nuget_signing'
      #       poolName: ${{ parameters.VM_IMAGE_HOST.name }}
      #       vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
      #       os: ${{ parameters.VM_IMAGE_HOST.os }}                                   
        
      #   - template: /eng/pipelines/common/insertion.yml@self                                # Insert on VS and SDK
      #     parameters:
      #       dependsOn: ['nuget_signing']
      #       stageName: 'sdk_insertion'
      #       poolName: ${{ parameters.VM_IMAGE_HOST.name }}
      #       vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
      #       os: ${{ parameters.VM_IMAGE_HOST.os }}
      #       pushMauiPackagesToMaestro: ${{ parameters.pushMauiPackagesToMaestro }}

      #   - template: /eng/pipelines/common/apiscan.yml@self                                  # ApiScan
      #     parameters:
      #       dependsOn: ['pack_net']
      #       poolName: ${{ parameters.VM_IMAGE_HOST.name }}
      #       vmImage: ${{ parameters.VM_IMAGE_HOST.image }}
      #       os: ${{ parameters.VM_IMAGE_HOST.os }}     
      #       scanArtifacts: ['${{ parameters.PackPlatform.binariesArtifact }}']
